# docker-compose.yml (共通ベースファイル)
# 開発・本番で共通のビルド情報、依存関係、基本的なネットワーク設定などを定義します。

services:
  remix:
    build:
      context: ./compose/remix
      dockerfile: Dockerfile
    networks:
      - oruca_network
    depends_on:
      api:
        condition: service_started
      orm:
        condition: service_completed_successfully
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - API_BASE_URL=http://api:3000
      - WS_URL=ws://api:3000
      - WSS_URL=wss://api:3000
    volumes:
      - ./ShardTypes/PrismaClient:/app/ShardTypes/PrismaClient:ro
      - ./ShardTypes/UserDefTypes:/app/ShardTypes/UserDefTypes
  api:
    build:
      context: ./compose/api
      dockerfile: Dockerfile
    networks:
      - oruca_network
    depends_on:
      postgres:
        condition: service_healthy
      orm:
        condition: service_completed_successfully
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    volumes:
      - ./ShardTypes/PrismaClient:/app/ShardTypes/PrismaClient:ro
      - ./ShardTypes/UserDefTypes:/app/ShardTypes/UserDefTypes
    
  nfc:
    build:
      context: ./compose/nfc
      dockerfile: Dockerfile
    init: true
    networks:
      - oruca_network
    depends_on:
      api:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      - API_BASE_URL=http://api:3000
      - WS_URL=ws://api:3000
    command: ["python","main.py"]
    devices:
      - "/dev/bus/usb:/dev/bus/usb"

  orm:
    build:
      context: ./compose/orm
      dockerfile: Dockerfile
    networks:
      - oruca_network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=${DATABASE_URL}
    volumes:
      - ./ShardTypes/PrismaClient:/app/ShardTypes/PrismaClient
  postgres:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oruca_network

networks:
  oruca_network:
    driver: bridge
